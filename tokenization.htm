<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tokenization Visualisiert</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-color: #F4F7FA;
            --card-bg-color: #FFFFFF;
            --text-primary: #1a202c;
            --text-secondary: #4a5568;
            --accent-blue: #3B82F6;
            --accent-green: #10B981;
        }
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-color);
            color: var(--text-primary);
            overflow: hidden;
        }
        .token-card {
            transition: all 0.5s cubic-bezier(0.25, 0.8, 0.25, 1);
            opacity: 0;
            transform: translateY(20px) scale(0.95);
        }
        .token-card.visible {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
        .highlight-input {
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.4);
            border-color: var(--accent-blue);
        }
        @keyframes arrow-bounce {
            0%, 100% {
                transform: translateY(-25%);
                animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
            }
            50% {
                transform: translateY(0);
                animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
            }
        }
        .arrow-bounce {
            animation: arrow-bounce 1s infinite;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-7xl h-[95vh] bg-white rounded-2xl shadow-xl p-6 md:p-8 flex flex-col border border-gray-200">
        <header class="text-center mb-6 flex-shrink-0">
            <h1 class="text-4xl md:text-5xl font-bold text-blue-600">Tokenization Visualisiert</h1>
            <p class="text-gray-500 mt-2 text-xl">Wie Sprachmodelle Text sehen</p>
        </header>

        <!-- Input Section -->
        <div class="bg-slate-50 border border-slate-200 rounded-xl p-6 mb-6 shadow-sm">
            <label for="text-input" class="block text-lg font-medium text-gray-600 mb-3">Geben Sie einen Satz ein:</label>
            <div class="flex flex-col sm:flex-row gap-4">
                <input type="text" id="text-input" class="w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-lg text-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition" placeholder="Der schnelle Fuchs springt..." value="Ich würde gerne Geld abheben. Ich">
                <button id="tokenize-btn" class="bg-blue-500 hover:bg-blue-600 text-white text-lg font-bold py-3 px-8 rounded-lg transition-transform duration-200 ease-in-out transform hover:scale-105 shadow-lg">
                    Tokenisieren
                </button>
            </div>
        </div>

        <!-- Animation Display -->
        <main class="flex-1 flex flex-col gap-6 justify-center overflow-y-auto">
            <!-- Tokens Display -->
            <div class="bg-slate-50 rounded-lg p-6 flex-1 border border-slate-200">
                <h2 class="text-2xl font-semibold text-gray-700 mb-4">1. In Tokens aufgeteilt</h2>
                <div id="tokens-container" class="min-h-[80px] flex flex-wrap gap-4 items-center">
                    <!-- Tokens will be injected here -->
                </div>
            </div>
            
            <!-- Arrow Down -->
            <div id="arrow-container" class="flex justify-center my-2 flex-shrink-0 opacity-0 transition-opacity duration-500">
                 <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-400 arrow-bounce" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                </svg>
            </div>

            <!-- IDs Display -->
            <div class="bg-slate-50 rounded-lg p-6 flex-1 border border-slate-200">
                <h2 class="text-2xl font-semibold text-gray-700 mb-4">2. In numerische IDs umgewandelt</h2>
                <div id="ids-container" class="min-h-[80px] flex flex-wrap gap-4 items-center">
                    <!-- IDs will be injected here -->
                </div>
            </div>
        </main>
    </div>

    <script>
        // DOM Elements
        const textInput = document.getElementById('text-input');
        const tokenizeBtn = document.getElementById('tokenize-btn');
        const tokensContainer = document.getElementById('tokens-container');
        const idsContainer = document.getElementById('ids-container');
        const arrowContainer = document.getElementById('arrow-container');

        // A simplified, static vocabulary for demonstration purposes.
        const vocabulary = {
            "Ich": 731,
            "würde": 5289,
            "gerne": 314,
            "Geld": 8888,
            "abheben": 12345,
            ".": 15,
            "<UNK>": 999 // Special token for unknown words
        };
        
        tokenizeBtn.addEventListener('click', startAnimation);
        textInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                startAnimation();
            }
        });

        function startAnimation() {
            const text = textInput.value;
            if (!text.trim()) return;

            tokenizeBtn.disabled = true;
            tokenizeBtn.classList.add('opacity-50', 'cursor-not-allowed');
            textInput.classList.add('highlight-input');

            tokensContainer.innerHTML = '';
            idsContainer.innerHTML = '';
            arrowContainer.classList.remove('opacity-100');
            
            // Use a regex that supports Unicode letters to handle 'ü'
            const tokens = text.match(/[\p{L}\p{N}]+|[.,!?;]/gu) || [];
            
            animateItems(tokens, 0);
        }

        function animateItems(tokens, index) {
            if (index >= tokens.length) {
                textInput.classList.remove('highlight-input');
                tokenizeBtn.disabled = false;
                tokenizeBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                return;
            }

            if (index > 0) {
                arrowContainer.classList.add('opacity-100');
            }

            const currentToken = tokens[index];

            setTimeout(() => {
                // Animate token
                const tokenCard = document.createElement('div');
                const tokenStyle = 'bg-green-100 border-green-400 text-green-800';
                tokenCard.className = `token-card ${tokenStyle} rounded-lg px-4 py-2 text-center text-xl font-medium shadow-md`;
                tokenCard.textContent = currentToken;
                tokensContainer.appendChild(tokenCard);
                setTimeout(() => tokenCard.classList.add('visible'), 50);

                // Animate ID
                setTimeout(() => {
                    let tokenId = vocabulary[currentToken] || vocabulary['<UNK>'];
                    const idCard = document.createElement('div');
                    const idStyle = 'bg-blue-100 border-blue-400 text-blue-800';
                    idCard.className = `token-card ${idStyle} rounded-lg px-4 py-2 text-center text-xl font-mono font-semibold shadow-md`;
                    idCard.textContent = tokenId;
                    idsContainer.appendChild(idCard);
                    setTimeout(() => idCard.classList.add('visible'), 50);

                    // Next item
                    animateItems(tokens, index + 1);
                }, 350);

            }, 300);
        }

        // Run on load
        window.onload = () => {
            setTimeout(startAnimation, 500);
        };
    </script>
</body>
</html>